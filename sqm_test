#!/bin/sh
#echo "0 */3 * * * [ -x /tmp/sqm/sqm_test ] && /tmp/sqm/sqm_test" >> /etc/crontabs/root

SQM_DIR="/tmp/sqm"
mkdir -p "$SQM_DIR"

ORIG_UPLOAD_FILE="$SQM_DIR/upload_orig"
ORIG_DOWNLOAD_FILE="$SQM_DIR/download_orig"
SQM_CONFIG="sqm.wan"
MIN_UPLOAD=512
MIN_DOWNLOAD=512
UPLOAD_URL="https://speedtest.milan.linode.com/upload"
DOWNLOAD_URL="http://speedtest.tele2.net/10MB.zip"
UPLOAD_TEST_FILE="$SQM_DIR/upload_test_file"
DOWNLOAD_TEST_FILE="$SQM_DIR/download_test_file"
UPTIME_MIN=600

# Verifica uptime
UPTIME=$(cut -d. -f1 /proc/uptime)
if [ "$UPTIME" -lt "$UPTIME_MIN" ]; then
    logger -t "exec: upload_download_test" "Uptime troppo basso ($UPTIME s), test saltato"
    exit 0
fi

# Crea file test upload 1MB se non esiste
[ -f "$UPLOAD_TEST_FILE" ] || dd if=/dev/zero of="$UPLOAD_TEST_FILE" bs=1M count=1

# Leggi valore upload originale SQM o salva se non presente
if [ -f "$ORIG_UPLOAD_FILE" ]; then
    ORIG_UPLOAD=$(cat "$ORIG_UPLOAD_FILE")
else
    ORIG_UPLOAD=$(uci get $SQM_CONFIG.upload 2>/dev/null || echo "5000")
    echo "$ORIG_UPLOAD" > "$ORIG_UPLOAD_FILE"
fi

# Leggi valore download originale SQM o salva se non presente
if [ -f "$ORIG_DOWNLOAD_FILE" ]; then
    ORIG_DOWNLOAD=$(cat "$ORIG_DOWNLOAD_FILE")
else
    ORIG_DOWNLOAD=$(uci get $SQM_CONFIG.download 2>/dev/null || echo "50000")
    echo "$ORIG_DOWNLOAD" > "$ORIG_DOWNLOAD_FILE"
fi

# Leggi limiti attuali SQM
CURRENT_UPLOAD_LIMIT=$(uci get $SQM_CONFIG.upload 2>/dev/null || echo "$ORIG_UPLOAD")
CURRENT_DOWNLOAD_LIMIT=$(uci get $SQM_CONFIG.download 2>/dev/null || echo "$ORIG_DOWNLOAD")

# Test upload
TIME_UPLOAD=$(curl -w '%{time_total}' -o /dev/null -s -T "$UPLOAD_TEST_FILE" "$UPLOAD_URL")
CURL_UPLOAD_STATUS=$?

if [ "$CURL_UPLOAD_STATUS" -ne 0 ] || [ -z "$TIME_UPLOAD" ] || ! awk "BEGIN {exit !($TIME_UPLOAD > 0)}"; then
    logger -t "exec: upload_download_test" "Errore nel test upload, curl fallito o tempo non valido"
    exit 1
fi

UPLOAD_SPEED_KBPS=$(awk -v time="$TIME_UPLOAD" 'BEGIN { printf "%.0f", 8000 / time }')
[ "$UPLOAD_SPEED_KBPS" -lt "$MIN_UPLOAD" ] && UPLOAD_SPEED_KBPS=$MIN_UPLOAD

# Test download
TIME_DOWNLOAD=$(curl -w '%{time_total}' -o /dev/null -s "$DOWNLOAD_URL")
CURL_DOWNLOAD_STATUS=$?

if [ "$CURL_DOWNLOAD_STATUS" -ne 0 ] || [ -z "$TIME_DOWNLOAD" ] || ! awk "BEGIN {exit !($TIME_DOWNLOAD > 0)}"; then
    logger -t "exec: upload_download_test" "Errore nel test download, curl fallito o tempo non valido"
    exit 1
fi

# Calcolo download in KBps (10MB = 80000 Kbit)
DOWNLOAD_SPEED_KBPS=$(awk -v time="$TIME_DOWNLOAD" 'BEGIN { printf "%.0f", 80000 / time }')
[ "$DOWNLOAD_SPEED_KBPS" -lt "$MIN_DOWNLOAD" ] && DOWNLOAD_SPEED_KBPS=$MIN_DOWNLOAD

# Controlla upload
if [ "$UPLOAD_SPEED_KBPS" -ge "$ORIG_UPLOAD" ]; then
    if [ "$CURRENT_UPLOAD_LIMIT" != "$ORIG_UPLOAD" ]; then
        logger -t "exec: upload_download_test" "Upload OK, ripristino SQM a $ORIG_UPLOAD kbps"
        uci set $SQM_CONFIG.upload="$ORIG_UPLOAD"
        service sqm reload
    else
        logger -t "exec: upload_download_test" "Upload OK, SQM già al valore originale"
    fi
else
    if [ "$CURRENT_UPLOAD_LIMIT" -ne "$UPLOAD_SPEED_KBPS" ]; then
        logger -t "exec: upload_download_test" "Upload basso, riduco SQM a $UPLOAD_SPEED_KBPS kbps"
        uci set $SQM_CONFIG.upload="$UPLOAD_SPEED_KBPS"
        service sqm reload
    else
        logger -t "exec: upload_download_test" "Upload già ridotto a $UPLOAD_SPEED_KBPS kbps"
    fi
fi

# Controlla download
if [ "$DOWNLOAD_SPEED_KBPS" -ge "$ORIG_DOWNLOAD" ]; then
    if [ "$CURRENT_DOWNLOAD_LIMIT" != "$ORIG_DOWNLOAD" ]; then
        logger -t "exec: upload_download_test" "Download OK, ripristino SQM a $ORIG_DOWNLOAD kbps"
        uci set $SQM_CONFIG.download="$ORIG_DOWNLOAD"
        service sqm reload
    else
        logger -t "exec: upload_download_test" "Download OK, SQM già al valore originale"
    fi
else
    if [ "$CURRENT_DOWNLOAD_LIMIT" -ne "$DOWNLOAD_SPEED_KBPS" ]; then
        logger -t "exec: upload_download_test" "Download basso, riduco SQM a $DOWNLOAD_SPEED_KBPS kbps"
        uci set $SQM_CONFIG.download="$DOWNLOAD_SPEED_KBPS"
        service sqm reload
    else
        logger -t "exec: upload_download_test" "Download già ridotto a $DOWNLOAD_SPEED_KBPS kbps"
    fi
fi
